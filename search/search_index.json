{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"CodersInventory <p>A Community-Powered Repository of Reusable Code Snippets</p>"},{"location":"#what-is-codersinventory","title":"\ud83d\ude80 What is CodersInventory?","text":"<p>CodersInventory is an open-source website where developers can share and discover reusable code snippets, environment setup guides, machine learning techniques, DevOps configurations, database scripts, and more that they frequently use in real-world projects and work-life. </p> <p>Instead of reinventing the wheel, CodersInventory allows developers to save, explore, and contribute practical snippets that make development faster and more efficient.</p> <p>This platform is built by developers, for developers\u2014starting as a personal initiative but open to contributions from the community.</p>"},{"location":"#why-use-codersinventory","title":"\ud83c\udf1f Why Use CodersInventory?","text":"<ul> <li>\ud83d\udee0 Real-World Snippets \u2013 From code snippets to environment setups.</li> <li>\ud83d\udd0d Easily Searchable \u2013 Find what you need in seconds.</li> <li>\ud83c\udfc6 Open Source &amp; Community-Driven \u2013 Anyone can contribute!</li> <li>\ud83c\udf10 Comprehensive Content \u2013 Covering code snippets, machine learning, DevOps, environment setups, and more.</li> <li>\ud83d\ude80 Language Agnostic \u2013 Supports multiple programming languages and technologies.</li> </ul> <p>Supported Languages:</p> <ul> <li>Python \ud83d\udc0d</li> </ul> <ul> <li>More coming soon...</li> </ul>"},{"location":"#how-to-use","title":"\ud83c\udf0d How to Use","text":"<ul> <li>Browse curated snippets for different languages and use cases.</li> <li>Copy and integrate them into your projects instantly.</li> <li>Contribute by adding your own snippets to help others!</li> </ul>"},{"location":"#contributing","title":"\ud83d\udcdd Contributing","text":"<p>We welcome all developers to share their reusable snippets! \ud83d\ude80</p> <ul> <li>\ud83d\udca1 Have a useful snippet? Submit it!</li> <li>\ud83d\udee0 Improve and refine existing snippets.</li> <li>\ud83d\udc1e Found an issue? Report it!</li> </ul>"},{"location":"#steps-to-contribute","title":"Steps to Contribute:","text":"<ol> <li>Fork the repository.</li> <li>Add your snippet in the appropriate category.</li> <li>Submit a Pull Request (PR) with a short description.</li> </ol>"},{"location":"#community-support","title":"\ud83e\udd1d Community &amp; Support","text":"<p>Join the CodersInventory community:</p> <ul> <li>\ud83d\udcac Discord</li> <li>\ud83d\udcdd GitHub Discussions</li> <li>\ud83d\udce2 Follow us on LinkedIn</li> </ul>"},{"location":"#license","title":"\ud83d\udcdc License","text":"<p>CodersInventory is open-source and released under the MIT License.</p>"},{"location":"#repository-information","title":"\ud83d\udccc Repository Information","text":"<ul> <li>Project Name: CodersInventory</li> <li>Repository: Hoopoes/CodersInventory</li> <li>Authors: Muhammad Umar Anzar &amp; Mubashir Ahmed Siddiqui</li> <li>Year: 2025  </li> <li>Created By: Hoopoes </li> <li>All Rights Reserved</li> </ul>"},{"location":"root/code-snippets/validation-patterns/pydantic/","title":"Pydantic Validators","text":""},{"location":"root/code-snippets/validation-patterns/pydantic/#computed-fields","title":"\ud83e\uddee Computed Fields","text":"<p>Computed fields derive values dynamically at runtime using <code>@computed_field</code>. These fields aren\u2019t provided as input but are calculated from existing fields. </p>"},{"location":"root/code-snippets/validation-patterns/pydantic/#usecase-1-extracting-a-username-from-an-email","title":"Usecase 1: Extracting a Username from an Email","text":"<pre><code>from pydantic import BaseModel, Field, computed_field\n\ndef extract_username(email: str) -&gt; str:\n    return email.split(\"@\")[0]\n\nclass User(BaseModel):\n    email: str = Field(..., description=\"User's email address.\")\n\n    @computed_field\n    @property\n    def username(self) -&gt; str:\n        return extract_username(self.email)\n\n# Example usage\nuser = User(email=\"foobar@example.com\")\nprint(user.username)  # foobar\nprint(user.model_dump())  \n\"\"\"\n{\n  'email': 'foobar@example.com',\n  'username': 'foobar'\n}\n\"\"\"\n</code></pre> Note <p>Computed fields are evaluated every time they are accessed. This means that calling <code>user.username</code>, printing it, or dumping the model (<code>model_dump()</code>) will recompute the value dynamically. </p>"},{"location":"root/code-snippets/validation-patterns/pydantic/#field-validators","title":"\u2705 Field Validators","text":"<p>Field validators modify, validate, or transform individual fields before assignment. They can run before or after field processing (<code>mode=\"before\"</code> or <code>\"after\"</code>). </p>"},{"location":"root/code-snippets/validation-patterns/pydantic/#usecase-1-replace-none-with-defaults","title":"Usecase 1: Replace <code>None</code> with Defaults","text":"<p>Pydantic keeps <code>None</code> if explicitly provided, even if a default exists. A field validator ensures <code>None</code> is replaced with the field\u2019s default.  </p> Tip <p>Useful for handling AI or API data where <code>None</code> should be replaced with defaults for consistency.</p> <pre><code>from typing import Optional\nfrom pydantic import BaseModel, field_validator\n\nclass User(BaseModel):\n    username: Optional[str] = \"foo_user\"\n    age: Optional[int] = 25\n    email: Optional[str] = \"foo@example.com\"\n\n    @field_validator(\"username\", \"age\", mode=\"before\")\n    @classmethod\n    def replace_null_with_default(cls, value, info):\n        if value is None:\n            return cls.model_fields[info.field_name].default\n        return value\n\n# Example usage\nllm_response = {\"username\": \"bar_user\",  \"age\": None,  \"email\": None}\nuser = User.model_validate(llm_response)\nprint(user.model_dump_json(indent=2))\n\"\"\"\n{\n  \"username\": \"bar_user\",\n  \"age\": 25,\n  \"email\": null\n}\n\"\"\"\n</code></pre>"},{"location":"root/code-snippets/validation-patterns/pydantic/#usecase-2-replace-empty-strings-with-na","title":"Usecase 2: Replace Empty Strings with <code>\"N/A\"</code>","text":"<p>By default, Pydantic does not modify empty strings. If you want to replace all empty string values with <code>\"N/A\"</code>, you can use a field validator to process them automatically.</p> Tip <p>This is useful for ensuring that empty input fields from forms, APIs, or databases do not remain blank but are replaced with a meaningful default value.</p> <pre><code>from pydantic import BaseModel, field_validator\n\nclass User(BaseModel):\n    name: str\n    email: str\n\n    @field_validator(\"*\", mode=\"before\")\n    @classmethod\n    def replace_empty(cls, value):\n        return \"N/A\" if value == \"\" else value\n\n# Example usage\nuser = User(name=\"\", email=\"foo@bar.com\")\nprint(user.model_dump())\n\"\"\"\n{\n  'name': 'N/A',\n  'email': 'foo@bar.com'\n}\n\"\"\"\n</code></pre>"},{"location":"root/code-snippets/validation-patterns/pydantic/#model-validators","title":"\ud83e\udde9 Model Validators","text":"<p>Model validators enforce rules that involve multiple fields. They run after all fields are validated, ensuring cross-field constraints and dependencies are met.</p>"},{"location":"root/code-snippets/validation-patterns/pydantic/#usecase-1-enforce-exactly-one-optional-field","title":"Usecase 1: Enforce Exactly One Optional Field","text":"<p>Sometimes, a model has two optional fields, but at least one must be provided while preventing both from being set simultaneously.  </p> Tip <p>This is useful for ensuring users provide either one type of input or another but not both.</p> <pre><code>from typing import Optional\nfrom pydantic import BaseModel, model_validator\n\nclass FooBarModel(BaseModel):\n    foo: Optional[str] = None\n    bar: Optional[str] = None\n\n    @model_validator(mode=\"after\")\n    def validate_exclusive_fields(self):\n        if (self.foo is None) == (self.bar is None):\n            raise ValueError(\"Either `foo` or `bar` must be provided, but not both.\")\n        return self\n\n# Example usage\nFooBarModel(foo=\"abc\")  # \u2705 Valid\nFooBarModel(bar=\"xyz\")  # \u2705 Valid\nFooBarModel()  # \u274c Raises error\nFooBarModel(foo=\"abc\", bar=\"xyz\")  # \u274c Raises error\n</code></pre>"},{"location":"root/data-storage/bucket/minio/","title":"MinIO Installation Guide","text":"<p>MinIO is a high-performance, S3-compatible object storage system. Follow the steps below to install and run it on Windows or Linux.</p>"},{"location":"root/data-storage/bucket/minio/#step-1-download-minio","title":"\ud83d\udce5 Step 1 \u2014 Download MinIO","text":"WindowsLinux <ol> <li> <p>Open PowerShell and create a folder for MinIO:</p> <pre><code>mkdir C:\\MinIO\ncd C:\\MinIO\n</code></pre> </li> <li> <p>Download the latest MinIO server binary:</p> <p>Download MinIO for Windows</p> <pre><code>Invoke-WebRequest -Uri \"https://dl.min.io/server/minio/release/windows-amd64/minio.exe\" -OutFile \"minio.exe\"\n</code></pre> </li> </ol> <ol> <li> <p>Download and install the MinIO package:</p> <p>Download MinIO for Linux</p> <pre><code>dnf install https://dl.min.io/server/minio/release/linux-amd64/minio-20250723155402.0.0-1.x86_64.rpm\nminio --version\n</code></pre> </li> </ol>"},{"location":"root/data-storage/bucket/minio/#step-2-run-minio-server","title":"\u25b6\ufe0f Step 2 \u2014 Run MinIO Server","text":"<p>First, create a folder for storing MinIO data. Example: <code>C:\\MinIO\\data</code> (Windows) or <code>/data/minio</code> (Linux).</p> WindowsLinux <pre><code>minio.exe server C:\\MinIO\\data\n</code></pre> <p>With custom ports</p> <pre><code>minio.exe server C:\\MinIO\\data --address :9000 --console-address :9001\n</code></pre> <pre><code>sudo mkdir -p /data/minio\nsudo chown -R $USER:$USER /data/minio\n</code></pre> <pre><code>minio server /data/minio\n</code></pre> <p>With custom ports</p> <pre><code>minio server /data/minio --address :9000 --console-address :9001\n</code></pre> <ul> <li>9000 \u2192 S3 API endpoint</li> <li>9001 \u2192 MinIO Web Console</li> </ul> <p>Access console in browser: \ud83d\udc49 http://localhost:9001</p>"},{"location":"root/data-storage/bucket/minio/#step-3-run-minio-as-a-service","title":"\u2699\ufe0f Step 3 \u2014 Run MinIO as a Service","text":"WindowsLinux <p>This ensures MinIO starts automatically with Windows.</p> <ol> <li> <p>Download the Windows Service helper:</p> <p>MinIO Service Helper for Windows</p> install-service.ps1 install-service.ps1<pre><code>#Check script run as administrator\nif (!([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] \"Administrator\")) { Start-Process powershell.exe \"-NoProfile -ExecutionPolicy Bypass -File `\"$PSCommandPath`\"\" -Verb RunAs; exit }\n\nSet-Location -Path $PSScriptRoot\n\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nInvoke-WebRequest -Uri \"https://github.com/winsw/winsw/releases/download/v2.8.0/WinSW.NET4.exe\" -OutFile \"minio-service.exe\"\n\n$config = @'\n&lt;service&gt;\n&lt;id&gt;MinIO&lt;/id&gt;\n&lt;name&gt;MinIO&lt;/name&gt;\n&lt;description&gt;MinIO is a high performance object storage server&lt;/description&gt;\n&lt;executable&gt;minio.exe&lt;/executable&gt;\n&lt;env name=\"MINIO_ROOT_USER\" value=\"minio\"/&gt;\n&lt;env name=\"MINIO_ROOT_PASSWORD\" value=\"minio123\"/&gt;\n&lt;arguments&gt;server C:\\minio&lt;/arguments&gt;\n&lt;logmode&gt;rotate&lt;/logmode&gt;\n&lt;/service&gt;\n'@\n\nSet-Content \"minio-service.xml\" $config\n\nStart-Process -WorkingDirectory $PSScriptRoot -FilePath \"$($PSScriptRoot)\\minio-service.exe\" -ArgumentList \"install\" -NoNewWindow -PassThru -Wait\n\nWrite-Host \"Installation done\"\n</code></pre> </li> <li> <p>Edit <code>install-service.ps1</code> (inside <code>C:\\MinIO</code>) and set:</p> <ul> <li>Path to <code>minio.exe</code></li> <li>Path to storage (<code>C:\\MinIO\\data</code>)</li> <li>Credentials (optional)</li> </ul> <p>Example section inside script:</p> <pre><code>&lt;executable&gt;minio.exe&lt;/executable&gt;\n&lt;env name=\"MINIO_ROOT_USER\" value=\"minioadmin\"/&gt;\n&lt;env name=\"MINIO_ROOT_PASSWORD\" value=\"minioadmin123\"/&gt;\n&lt;arguments&gt;server C:\\MinIO\\data --address :9000 --console-address :9001&lt;/arguments&gt;\n</code></pre> </li> <li> <p>Run the installer script (in PowerShell as Administrator):</p> <pre><code>.\\install-service.ps1\n</code></pre> </li> <li> <p>Start the service:</p> <pre><code>net start MinIO\n</code></pre> </li> <li> <p>Verify service status:</p> <pre><code>sc query MinIO\n</code></pre> </li> </ol> <ol> <li> <p>Create service file:</p> <pre><code>sudo nano /etc/systemd/system/minio.service\n</code></pre> <p>Paste:</p> <pre><code>[Unit]\nDescription=MinIO Object Storage\nAfter=network.target\n\n[Service]\nUser=root\nGroup=root\nExecStart=/usr/local/bin/minio server /data/minio --address :9000 --console-address :9001\nEnvironment=\"MINIO_ROOT_USER=minioadmin\"\nEnvironment=\"MINIO_ROOT_PASSWORD=minioadmin123\"\nRestart=always\nLimitNOFILE=65536\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> </li> <li> <p>Reload services &amp; enable MinIO:</p> <pre><code>sudo systemctl daemon-reload\nsudo systemctl enable minio\nsudo systemctl start minio\n</code></pre> </li> <li> <p>Check status:</p> <pre><code>systemctl status minio\n</code></pre> </li> </ol>"},{"location":"root/devops/","title":"DevOps","text":"<p>Coming Soon</p>"},{"location":"root/docs-and-markup/markdown/","title":"Markdown Formatting","text":"<p>A comprehensive guide to Markdown formatting, covering essential Markdown syntax and features.</p>"},{"location":"root/docs-and-markup/markdown/#headings","title":"\ud83d\udcdd Headings","text":"<p>Use <code>#</code> symbols to create headings of different levels. <pre><code># H1 Heading\n## H2 Heading\n### H3 Heading\n#### H4 Heading\n##### H5 Heading\n###### H6 Heading\n</code></pre></p> <p></p>"},{"location":"root/docs-and-markup/markdown/#text-formatting","title":"\u270d\ufe0f Text Formatting","text":"<p>Style text using bold, italic, strikethrough, or a combination. <pre><code>**Bold Text**  \n*Italic Text*  \n~~Strikethrough~~  \n**_Bold &amp; Italic_**  \n</code></pre></p> <p>OUTPUT</p> <p>Bold Text Italic Text Strikethrough Bold &amp; Italic </p> <p></p>"},{"location":"root/docs-and-markup/markdown/#lists","title":"\ud83d\udccb Lists","text":""},{"location":"root/docs-and-markup/markdown/#unordered-list","title":"Unordered List","text":"<p>Create bulleted lists using <code>-</code> or <code>*</code>. <pre><code>- Item 1\n- Item 2\n    - Sub-item 1\n    - Sub-item 2\n</code></pre></p> <p>OUTPUT</p> <ul> <li>Item 1  </li> <li>Item 2  <ul> <li>Sub-item 1  </li> <li>Sub-item 2  </li> </ul> </li> </ul>"},{"location":"root/docs-and-markup/markdown/#ordered-list","title":"Ordered List","text":"<p>Use numbers for ordered lists. <pre><code>1. First item\n2. Second item\n    1. Sub-item\n    2. Sub-item\n</code></pre></p> <p>OUTPUT</p> <ol> <li>First item  </li> <li>Second item  <ol> <li>Sub-item  </li> <li>Sub-item  </li> </ol> </li> </ol> <p></p>"},{"location":"root/docs-and-markup/markdown/#blockquotes","title":"\ud83d\udcac Blockquotes","text":"<p>Use <code>&gt;</code> to create blockquotes for emphasis or citations. <pre><code>&gt; This is a blockquote.  \n&gt; It can span multiple lines.\n</code></pre></p> <p>OUTPUT</p> <p>This is a blockquote. It can span multiple lines.  </p> <p></p>"},{"location":"root/docs-and-markup/markdown/#horizontal-ruleline","title":"\u2796 Horizontal Rule/Line","text":"<p>Use <code>---</code>, <code>***</code>, or <code>___</code> to insert a horizontal line. <pre><code>---\n***\n___\n</code></pre></p> <p>OUTPUT</p> <p></p>"},{"location":"root/docs-and-markup/markdown/#links","title":"\ud83d\udd17 Links","text":"<p>Create clickable hyperlinks using <code>[text](URL)</code>. <pre><code>[Visit MkDocs](https://www.mkdocs.org)\n</code></pre></p> <p>OUTPUT</p> <p>Visit MkDocs </p> <p></p>"},{"location":"root/docs-and-markup/markdown/#images","title":"\ud83d\uddbc\ufe0f Images","text":"<p>Embed images using <code>![Alt Text](Image URL)</code>. <pre><code>![Alt Text](https://via.placeholder.com/150)\n</code></pre></p> <p>OUTPUT</p> <p> </p> <p></p>"},{"location":"root/docs-and-markup/markdown/#tables","title":"\ud83d\udcca Tables","text":"<p>Organize data using pipes <code>|</code> and hyphens <code>-</code>. <pre><code>| Name  | Age |  Country |\n|-------|----:|----------|\n| Alice |  25 | USA      |\n| Bob   |  30 | Canada   |\n</code></pre></p> <p>OUTPUT</p> Name Age Country Alice 25 USA Bob 30 Canada <p></p>"},{"location":"root/docs-and-markup/markdown/#code-blocks","title":"\ud83d\udcbb Code Blocks","text":""},{"location":"root/docs-and-markup/markdown/#basic-code-block","title":"Basic Code Block","text":"<p>Wrap code snippets inside triple backticks. <pre><code>    ```py\n    print(\"Hello, World!\")\n    ```\n</code></pre></p> <p>OUTPUT</p> <pre><code>print(\"Hello, World!\")\n</code></pre> <p></p>"},{"location":"root/docs-and-markup/markdown/#with-language-syntax-highlighting","title":"With Language Syntax Highlighting","text":"<p>Specify the programming language for syntax highlighting. <pre><code>    ```python\n    def greet(name):\n        return f\"Hello, {name}!\"\n    ```\n</code></pre></p> <p>OUTPUT</p> <pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n</code></pre> <p></p>"},{"location":"root/docs-and-markup/markdown/#inline-code","title":"Inline Code","text":"<p>Use backticks to insert inline code within text. <pre><code>Use `print(\"Hello, World!\")` inside a sentence.\n</code></pre></p> <p>OUTPUT</p> <p>Use <code>print(\"Hello, World!\")</code> inside a sentence.  </p> <p></p>"},{"location":"root/docs-and-markup/markdown/#task-lists","title":"\u2705 Task Lists","text":"<p>Create interactive task lists with <code>[ ]</code> for incomplete and <code>[x]</code> for completed tasks. <pre><code>- [x] Task 1\n- [ ] Task 2\n- [ ] Task 3\n</code></pre></p> <p>OUTPUT</p> <ul> <li> Task 1  </li> <li> Task 2  </li> <li> Task 3  </li> </ul> <p></p>"},{"location":"root/docs-and-markup/markdown/#math-equations-latex","title":"\ud83d\udd22 Math Equations (LaTeX)","text":"<p>Use LaTeX syntax within <code>$$</code> to display mathematical equations. <pre><code>$$\nx = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\n$$\n</code></pre></p> <p>OUTPUT</p> \\[ x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a} \\] <p></p>"},{"location":"root/docs-and-markup/markdown/#emojis-if-supported","title":"\ud83d\ude00 Emojis (If Supported)","text":"<p>Insert emojis using Unicode characters. <pre><code>\ud83d\ude80 \ud83c\udf89 \ud83d\udd25\n</code></pre></p> <p>OUTPUT</p> <p>\ud83d\ude80 \ud83c\udf89 \ud83d\udd25  </p> <p></p>"},{"location":"root/docs-and-markup/mkdocs/","title":"MkDocs Formatting","text":"<p>A comprehensive guide to MkDocs formatting, highlighting its exclusive features. While MkDocs supports standard Markdown, this guide focuses solely on its unique enhancements. For general Markdown syntax, check Markdown Formatting.</p>"},{"location":"root/docs-and-markup/mkdocs/#admonitions-notes-warnings-tips","title":"\u26a0\ufe0f Admonitions (Notes, Warnings, Tips)","text":"<p>Use <code>!!!</code> for special alert boxes like notes, warnings, and tips. <pre><code>!!! note\n    This is an informational note.\n\n!!! warning\n    Be careful with this action!\n\n!!! tip\n    Here\u2019s a useful tip for you!\n\n!!! danger\n    This is a dangerous operation.\n</code></pre></p> <p>OUTPUT</p> <p>Note</p> <p>This is an informational note.  </p> <p>Warning</p> <p>Be careful with this action!  </p> <p>Tip</p> <p>Here\u2019s a useful tip for you!  </p> <p>Danger</p> <p>This is a dangerous operation.  </p> <p></p>"},{"location":"root/docs-and-markup/mkdocs/#expandable-code-blocks-collapsible-sections","title":"\ud83d\udcc2 Expandable Code Blocks (Collapsible Sections)","text":""},{"location":"root/docs-and-markup/mkdocs/#basic-collapsible-code-block","title":"Basic Collapsible Code Block","text":"<p>Use <code>???+</code> to create expandable sections. <pre><code>???+ note \"Click to Expand\"\n    ```python\n    def greet(name):\n        return f\"Hello, {name}!\"\n    ```\n</code></pre></p> <p>OUTPUT </p> Click to Expand <pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n</code></pre>"},{"location":"root/docs-and-markup/mkdocs/#collapsible-code-block-with-filename","title":"Collapsible Code Block with Filename","text":"<p>Attach filenames to collapsible sections. <pre><code>???+ info \"View greet.py\"\n    ```python title=\"greet.py\"\n    def greet(name):\n        return f\"Hello, {name}!\"\n    ```\n</code></pre></p> <p>OUTPUT </p> View greet.py greet.py<pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n</code></pre>"},{"location":"root/docs-and-markup/mkdocs/#collapsible-code-block-with-explanation","title":"Collapsible Code Block with Explanation","text":"<p>Combine text and collapsible code blocks for better explanation. <pre><code>???+ warning \"See Code with Explanation\"\n    Here's a simple Python function:\n\n    ```python\n    def square(num):\n        return num * num\n    ```\n\n    This function takes a number and returns its square.\n</code></pre></p> <p>OUTPUT </p> See Code with Explanation <p>Here's a simple Python function:  </p> <pre><code>def square(num):\n    return num * num\n</code></pre> <p>This function takes a number and returns its square.</p> <p></p>"},{"location":"root/docs-and-markup/mkdocs/#code-blocks","title":"\ud83d\udcbb Code Blocks","text":""},{"location":"root/docs-and-markup/mkdocs/#with-filename","title":"With Filename","text":"<p>Label the code block with a filename. <pre><code>    ```python title=\"greet.py\"\n    def greet(name):\n        return f\"Hello, {name}!\"\n    ```\n</code></pre></p> <p>OUTPUT</p> greet.py<pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n</code></pre> <p></p>"},{"location":"root/docs-and-markup/mkdocs/#with-line-numbers","title":"With Line Numbers","text":"<p>Enable line numbers for better readability. <pre><code>    ```python linenums=\"1\"\n    def greet(name):\n        return f\"Hello, {name}!\"\n    ```\n</code></pre></p> <p>OUTPUT</p> <pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n</code></pre> <p></p>"},{"location":"root/docs-and-markup/mkdocs/#with-highlighted-lines","title":"With Highlighted Lines","text":"<p>Highlight specific lines in the code block. <pre><code>    ```python hl_lines=\"2 4 6-8\"\n    def greet(name):\n        message = f\"Hello, {name}!\" \n        print(message)  \n        return message\n\n    def farewell(name):\n        message = f\"Goodbye, {name}!\" \n        print(message)\n        return message  \n    ```\n</code></pre></p> <p>OUTPUT</p> <pre><code>def greet(name):\n    message = f\"Hello, {name}!\"  \n    print(message)  \n    return message\n\ndef farewell(name):\n    message = f\"Goodbye, {name}!\"\n    print(message)\n    return message  \n</code></pre> <p></p>"},{"location":"root/docs-and-markup/mkdocs/#with-line-numbers-and-highlighted-lines","title":"With Line Numbers and Highlighted Lines","text":"<pre><code>    ```python linenums=\"1\" hl_lines=\"2\"\n    def greet(name):\n        message = f\"Hello, {name}!\"  # Highlighted\n        return message\n    ```\n</code></pre> <p>OUTPUT</p> <pre><code>def greet(name):\n    message = f\"Hello, {name}!\"  # Highlighted\n    return message\n</code></pre> <p></p>"},{"location":"root/docs-and-markup/mkdocs/#code-annotation","title":"\ud83c\udff7\ufe0f Code Annotation","text":"<pre><code>    ```python\n    def greet(name):  # Function definition\n        message = f\"Hello, {name}!\"  # (1)!  \n        return message # (2)!\n    ```\n    { .annotate }\n\n    1. Formats a greeting message using f-string.  \n    2. Returns the formatted message. \n\n\n    Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.\n    { .annotate }\n\n    1.  :man_raising_hand: I'm an annotation! I can contain `code`, __formatted\n        text__, images, ... basically anything that can be expressed in Markdown.\n</code></pre> <p>OUTPUT</p> <p><pre><code>def greet(name):  # Function definition\n    message = f\"Hello, {name}!\"  # (1)!  \n    return message # (2)!\n</code></pre></p> <ol> <li>Formats a greeting message using f-string.  </li> <li>Returns the formatted message.</li> </ol> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be expressed in Markdown.</li> </ol> <p></p>"},{"location":"root/environment/deep-learning/paddlepaddle/","title":"PaddlePaddle","text":"<p>This guide walks you through setting up PaddlePaddle in a Python project using <code>poetry</code>, <code>uv</code>, or plain <code>requirements.txt</code>.</p>"},{"location":"root/environment/deep-learning/paddlepaddle/#checking-for-compatible-paddlepaddle-versions","title":"\ud83d\udd0d Checking for Compatible PaddlePaddle Versions","text":"<p>PaddlePaddle provides separate builds for CPU and CUDA-enabled GPUs. To find the correct installation index for your system, visit:</p> <ul> <li>PaddlePaddle Installation Guide</li> </ul>"},{"location":"root/environment/deep-learning/paddlepaddle/#before-you-begin","title":"\ud83d\udccb Before You Begin","text":"<p>You should be comfortable with at least one dependency management tool below. If not, stick with <code>requirements.txt</code> for a simpler setup.</p> <ul> <li>Poetry \u2013 Python dependency and packaging manager.</li> <li>uv \u2013 Fast alternative to pip + virtualenv.</li> </ul>"},{"location":"root/environment/deep-learning/paddlepaddle/#setup","title":"\ud83d\udee0\ufe0f Setup","text":"<p>Choose the appropriate configuration below (CPU or GPU) and update your <code>pyproject.toml</code> or <code>requirements.txt</code> accordingly.</p>"},{"location":"root/environment/deep-learning/paddlepaddle/#cpu-configuration","title":"CPU Configuration","text":"<p>This configuration installs the CPU-only PaddlePaddle.</p> requirements.txtpoetryuv Terminal<pre><code>python -m pip install paddlepaddle==3.1.0 -i https://www.paddlepaddle.org.cn/packages/stable/cpu/\n</code></pre> requirements.txt<pre><code>--extra-index-url https://www.paddlepaddle.org.cn/packages/stable/cpu/\npaddlepaddle==3.1.0\n</code></pre> Terminal<pre><code># Add Source First\npoetry source add --priority=explicit paddle-cpu https://www.paddlepaddle.org.cn/packages/stable/cpu/\n\npoetry add paddlepaddle==3.1.0 --source paddle-cpu\n</code></pre> pyproject.toml<pre><code>[project]\nname = \"project-name\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.11,&lt;3.12\"\ndependencies = [\n    \"paddlepaddle==3.1.0\"\n]\n\n[[tool.poetry.source]]\nname = \"paddle-cpu\"\nurl = \"https://www.paddlepaddle.org.cn/packages/stable/cpu/\"\npriority = \"explicit\"\n\n[tool.poetry.dependencies]\npaddlepaddle = {source = \"paddle-cpu\"}\n\n[tool.poetry]\npackage-mode = false\n\n[build-system]\nrequires = [\"poetry-core&gt;=2.0.0,&lt;3.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n</code></pre> pyproject.toml<pre><code>[project]\nname = \"project-name\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.11,&lt;3.12\"\ndependencies = [\n    \"paddlepaddle==3.1.0\"\n]\n\n[[tool.uv.index]]\nname = \"paddlepaddle-cpu\"\nurl = \"https://www.paddlepaddle.org.cn/packages/stable/cpu/\"\nexplicit = true\n\n[tool.uv.sources]\npaddlepaddle = {index = \"paddlepaddle-cpu\"}\n</code></pre>"},{"location":"root/environment/deep-learning/paddlepaddle/#gpu-configuration","title":"GPU Configuration","text":"<p>This configuration installs a version of PaddlePaddle optimized for NVIDIA GPUs with CUDA 12.6 support (<code>cu126</code>).</p> requirements.txtpoetryuv Terminal<pre><code>python -m pip install paddlepaddle-gpu==3.1.0 -i https://www.paddlepaddle.org.cn/packages/stable/cu126/\n</code></pre> requirements.txt<pre><code>--extra-index-url https://www.paddlepaddle.org.cn/packages/stable/cu126/\npaddlepaddle-gpu==3.1.0\n</code></pre> Terminal<pre><code># Add Source First\npoetry source add --priority=explicit paddle-cu https://www.paddlepaddle.org.cn/packages/stable/cu126/\n\npoetry add paddlepaddle-gpu==3.1.0 --source paddle-cu\n</code></pre> pyproject.toml<pre><code>[project]\nname = \"project-name\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.11,&lt;3.12\"\ndependencies = [\n    \"paddlepaddle-gpu==3.1.0\"\n]\n\n[[tool.poetry.source]]\nname = \"paddle-cu\"\nurl = \"https://www.paddlepaddle.org.cn/packages/stable/cu126/\"\npriority = \"explicit\"\n\n[tool.poetry.dependencies]\npaddlepaddle-gpu = {source = \"paddle-cu\"}\n\n[tool.poetry]\npackage-mode = false\n\n[build-system]\nrequires = [\"poetry-core&gt;=2.0.0,&lt;3.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n</code></pre> pyproject.toml<pre><code>[project]\nname = \"project-name\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.11,&lt;3.12\"\ndependencies = [\n    \"paddlepaddle-gpu==3.1.0\"\n]\n\n[[tool.uv.index]]\nname = \"paddlepaddle-cu\"\nurl = \"https://www.paddlepaddle.org.cn/packages/stable/cu126/\"\nexplicit = true\n\n[tool.uv.sources]\npaddlepaddle-gpu = {index = \"paddlepaddle-cu\"}\n</code></pre> Note <ul> <li>If you need a different CUDA version (e.g., CUDA 11.8 or 12.9), update the GPU index URL accordingly by checking the official PaddlePaddle install instructions. PaddlePaddle Index</li> <li>Always ensure your Python version is compatible with the PaddlePaddle release you are installing.</li> </ul>"},{"location":"root/environment/deep-learning/tensorflow/","title":"TensorFlow with Poetry","text":"<p>This guide walks you through setting up TensorFlow in a Poetry-managed Python project.</p>"},{"location":"root/environment/deep-learning/tensorflow/#checking-for-compatible-tensorflow-versions","title":"\ud83d\udd0d Checking for Compatible TensorFlow Versions","text":"<p>To ensure compatibility with your system's configuration, visit:</p> <ul> <li>TensorFlow Installation Guide.</li> </ul>"},{"location":"root/environment/deep-learning/tensorflow/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<p>Before setting up this project, ensure you have a basic understanding of the following tools:</p> <ul> <li>Poetry: A dependency management tool (similar to npm for Node.js).</li> </ul>"},{"location":"root/environment/deep-learning/tensorflow/#setup","title":"\ud83d\udee0\ufe0f Setup","text":"<p>Based on your hardware, update your <code>pyproject.toml</code> file with the appropriate configuration.</p> CPU Configuration on Windows/Linux <p>This configuration installs a version of Tensorflow optimized for CPU usage.</p> pyproject.toml<pre><code>[project]\nname = \"project-name\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.11,&lt;3.12\"\ndependencies = [\n    \"tensorflow (&gt;=2.18.0)\",\n    \"tensorflow-io-gcs-filesystem (==0.31.0)\",\n    \"tf-keras (&gt;=2.18.0)\",\n    \"tensorflow-intel (&gt;=2.18.0) ; sys_platform != 'linux'\"\n]\n\n[tool.poetry]\npackage-mode = false\n\n[build-system]\nrequires = [\"poetry-core&gt;=2.0.0,&lt;3.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n</code></pre> Warning <ul> <li>TensorFlow no longer supports GPU acceleration on Windows.</li> <li>NumPy 2.0 may cause compatibility issues with older Tensorflow &amp; Python. If you experience problems, try specifying one of these NumPy versions in your dependencies:<ul> <li><code>numpy = \"1.26.4\"</code> </li> <li><code>numpy = \"1.26.3\"</code></li> </ul> </li> </ul> Note <ul> <li>The configuration above is set up for Python versions between 3.11 (inclusive) and 3.12 (exclusive). Adjust the Python version in your <code>pyproject.toml</code> file if your project uses a different version.</li> <li>For any issues related to version compatibility or performance, double-check your system\u2019s drivers and ensure all dependencies are up-to-date.</li> </ul>"},{"location":"root/environment/deep-learning/tensorflow/#future-updates","title":"\ud83d\ude80 Future Updates","text":"<p>Guidance for configuring TensorFlow with GPU support on Linux is forthcoming. Stay tuned for updates. In the meantime, you can refer to the official TensorFlow Installation Guide for the latest information.</p>"},{"location":"root/environment/deep-learning/torch/","title":"PyTorch","text":"<p>This guide walks you through setting up PyTorch in a Python project using <code>poetry</code>, <code>uv</code>, or plain <code>requirements.txt</code>.</p>"},{"location":"root/environment/deep-learning/torch/#checking-for-compatible-pytorch-versions","title":"\ud83d\udd0d Checking for Compatible PyTorch Versions","text":"<p>PyTorch provides different versions for CPU and CUDA-enabled GPUs. To find the correct package index for your system, visit:</p> <ul> <li>PyTorch Installation Guide</li> </ul>"},{"location":"root/environment/deep-learning/torch/#before-you-begin","title":"\ud83d\udccb Before You Begin","text":"<p>You should be comfortable with at least one dependency management tool below. If not, stick with <code>requirements.txt</code> for a simpler setup.</p> <ul> <li> <p>Poetry \u2013 Python dependency and packaging manager.</p> </li> <li> <p>uv \u2013 Fast alternative to pip + virtualenv.</p> </li> </ul>"},{"location":"root/environment/deep-learning/torch/#setup","title":"\ud83d\udee0\ufe0f Setup","text":"<p>Choose the appropriate configuration below (CPU or GPU) and update your <code>pyproject.toml</code> or <code>requirements.txt</code> accordingly.</p>"},{"location":"root/environment/deep-learning/torch/#cpu-configuration","title":"CPU Configuration","text":"<p>This configuration installs a version of PyTorch optimized for CPU-only systems.</p> requirements.txtpoetryuv Terminal<pre><code>pip install torch --index-url https://download.pytorch.org/whl/cpu\npip install torchvision --index-url https://download.pytorch.org/whl/cpu\npip install torchaudio --index-url https://download.pytorch.org/whl/cpu\n\n# OR\n\n# Install all PyTorch packages in a single command\npip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu\n</code></pre> requirements.txt<pre><code>--extra-index-url https://download.pytorch.org/whl/cpu\ntorch\ntorchvision\ntorchaudio\n</code></pre> Terminal<pre><code># Add Source First\npoetry source add --priority=explicit pytorch-cpu https://download.pytorch.org/whl/cpu\n\npoetry add torch --source pytorch-cpu\npoetry add torchvision --source pytorch-cpu\npoetry add torchaudio --source pytorch-cpu\n</code></pre> pyproject.toml<pre><code>[project]\nname = \"project-name\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.11,&lt;3.12\"\ndependencies = [\n    \"torch&gt;=2.2.0\",\n    \"torchvision&gt;=0.17.0\",\n    \"torchaudio&gt;=2.2.0\"\n]\n\n[[tool.poetry.source]]\nname = \"pytorch-cpu\"\nurl = \"https://download.pytorch.org/whl/cpu\"\npriority = \"explicit\"\n\n[tool.poetry.dependencies]\ntorch = {source = \"pytorch-cpu\"}\ntorchvision = {source = \"pytorch-cpu\"}\ntorchaudio = {source = \"pytorch-cpu\"}\n\n[tool.poetry]\npackage-mode = false\n\n[build-system]\nrequires = [\"poetry-core&gt;=2.0.0,&lt;3.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n</code></pre> pyproject.toml<pre><code>[project]\nname = \"project-name\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.11,&lt;3.12\"\ndependencies = [\n    \"torch&gt;=2.2.0\",\n    \"torchvision&gt;=0.17.0\",\n    \"torchaudio&gt;=2.2.0\"\n]\n\n[[tool.uv.index]]\nname = \"pytorch-cpu\"\nurl = \"https://download.pytorch.org/whl/cpu\"\nexplicit = true\n\n[tool.uv.sources]\ntorch = {index = \"pytorch-cpu\"}\ntorchvision = {index = \"pytorch-cpu\"}\ntorchaudio = {index = \"pytorch-cpu\"}\n</code></pre>"},{"location":"root/environment/deep-learning/torch/#gpu-configuration","title":"GPU Configuration","text":"<p>This configuration installs a version of PyTorch optimized for NVIDIA GPUs with CUDA 12.1 support (<code>cu121</code>). </p> requirements.txtpoetryuv Terminal<pre><code>pip install torch --index-url https://download.pytorch.org/whl/cu121\npip install torchvision --index-url https://download.pytorch.org/whl/cu121\npip install torchaudio --index-url https://download.pytorch.org/whl/cu121\n\n# OR\n\n# Install all PyTorch packages in a single command\npip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121\n</code></pre> requirements.txt<pre><code>--extra-index-url https://download.pytorch.org/whl/cu121\ntorch\ntorchvision\ntorchaudio\n</code></pre> Terminal<pre><code># Add Source First\npoetry source add --priority=explicit pytorch-cu https://download.pytorch.org/whl/cu121\n\npoetry add torch --source pytorch-cu\npoetry add torchvision --source pytorch-cu\npoetry add torchaudio --source pytorch-cu\n</code></pre> pyproject.toml<pre><code>[project]\nname = \"project-name\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.11,&lt;3.12\"\ndependencies = [\n    \"torch&gt;=2.2.0\",\n    \"torchvision&gt;=0.17.0\",\n    \"torchaudio&gt;=2.2.0\"\n]\n\n[[tool.poetry.source]]\nname = \"pytorch-cu\"\nurl = \"https://download.pytorch.org/whl/cu121\"\npriority = \"explicit\"\n\n[tool.poetry.dependencies]\ntorch = {source = \"pytorch-cu\"}\ntorchvision = {source = \"pytorch-cu\"}\ntorchaudio = {source = \"pytorch-cu\"}\n\n[tool.poetry]\npackage-mode = false\n\n[build-system]\nrequires = [\"poetry-core&gt;=2.0.0,&lt;3.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n</code></pre> pyproject.toml<pre><code>[project]\nname = \"project-name\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.11,&lt;3.12\"\ndependencies = [\n    \"torch&gt;=2.2.0\",\n    \"torchvision&gt;=0.17.0\",\n    \"torchaudio&gt;=2.2.0\"\n]\n\n[[tool.uv.index]]\nname = \"pytorch-cu\"\nurl = \"https://download.pytorch.org/whl/cu121\"\nexplicit = true\n\n[tool.uv.sources]\ntorch = {index = \"pytorch-cu\"}\ntorchvision = {index = \"pytorch-cu\"}\ntorchaudio = {index = \"pytorch-cu\"}\n</code></pre> NumPy Compatibility <ul> <li>NumPy 2.0 may cause compatibility issues with older PyTorch &amp; Python. If you experience problems, try specifying one of these NumPy versions in your dependencies:<ul> <li><code>numpy = \"1.26.4\"</code> </li> <li><code>numpy = \"1.26.3\"</code></li> </ul> </li> </ul> Note <ul> <li>If you need a different CUDA version (e.g., CUDA 11.8 or 12.0), update the <code>url</code> in the GPU configuration by checking the official PyTorch Index.</li> <li>Always ensure your Python version is compatible with the PyTorch release you are installing.</li> </ul>"},{"location":"root/machine-Learning/llm-fine-tune/lora/flant5/","title":"FlanT5","text":"<p>Coming Soon</p>"},{"location":"root/utilities/cron-job/","title":"Cron Job with FastAPI Utils","text":"<p>The cron job utility demonstrates how to use <code>fastapi-utils</code> to run recurring background tasks in a FastAPI application.</p> <p>Dependencies</p> <pre><code>pip install typing-inspect fastapi-utils\n</code></pre>"},{"location":"root/utilities/cron-job/#cron-job-setup-with-lifespan","title":"\u23f0 Cron Job Setup with Lifespan","text":"server.py<pre><code>from fastapi import FastAPI\nfrom fastapi_utils.tasks import repeat_every\nfrom contextlib import asynccontextmanager\n\n# 1-minute recurring task\n@repeat_every(seconds=60)\nasync def cron_job():\n    print(\"CronJob....\")\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # Optional: Run once at startup\n    await cron_job()\n    yield\n\n# Attach lifespan to FastAPI app\napp = FastAPI(lifespan=lifespan)\n</code></pre>"},{"location":"root/utilities/cron-job/#how-it-works","title":"\ud83d\udee0\ufe0f How It Works","text":"<ul> <li><code>@repeat_every(...)</code>: Decorator to schedule repeated execution.</li> <li><code>lifespan</code>: Hook that initializes your cron job when the FastAPI app starts.</li> <li>Non-blocking execution allows background scheduling without interfering with request handling.</li> </ul>"},{"location":"root/utilities/cron-job/#when-to-use","title":"\u2705 When to Use","text":"<ul> <li>Email reminders every hour</li> <li>Database cleanup tasks</li> <li>Scheduled API polling</li> <li>Metrics/report aggregation jobs</li> </ul>"},{"location":"root/utilities/email-service/","title":"Email Service","text":"<p>The EmailService class provides both synchronous and asynchronous methods for sending emails, complete with support for HTML templates and dynamic data rendering using <code>chevron</code>. It supports To, CC, and BCC recipients, making it versatile for various use cases.</p>"},{"location":"root/utilities/email-service/#email-service-class","title":"\u2709\ufe0f Email Service Class","text":"<p>Dependencies</p> <ul> <li>pip install chevron</li> <li>pip install aiosmtplib</li> </ul> email_service.py<pre><code>import chevron\nimport smtplib\nimport aiosmtplib\nfrom email.utils import formataddr\nfrom email.mime.text import MIMEText\nfrom typing import Any, Optional\nfrom email.mime.multipart import MIMEMultipart\n\nclass EmailService:\n    def __init__(self, display_name: str, email_sender: str, email_password: str) -&gt; None:\n        self.display_name = display_name\n        self.email_sender = email_sender\n        self._email_password = email_password\n\n    def compile_email(self, \n            subject: str, \n            to: list[str], \n            html: str, data: Optional[dict[str, Any]] = None, \n            cc: Optional[list[str]] = None, \n            bcc: Optional[list[str]] = None):\n\n        msg = MIMEMultipart('alternative')\n        if self.display_name:\n            msg['From'] = formataddr((self.display_name, self.email_sender))\n        else:\n            msg['From'] = self.email_sender\n\n        # Handle To, CC, and BCC\n        recipients = to[:]  # Start with the 'to' list\n        if cc:\n            msg['Cc'] = \", \".join(cc) #Comma separated for multiple CCs\n            recipients.extend(cc)\n        if bcc:\n            msg['Bcc'] = \", \".join(bcc) #Comma separated for multiple BCCs\n            recipients.extend(bcc)\n        msg['To'] = \", \".join(to) #Comma separated for multiple TOs\n\n        msg['Subject'] = subject\n\n        if data is not None:\n            html = chevron.render(template=html, data=data)\n\n        part1 = MIMEText(html, 'html')\n        msg.attach(part1)\n        return recipients, msg\n\n    def send_email(\n            self, \n            subject: str, \n            to: list[str], \n            html: str, \n            data: Optional[dict[str, Any]] = None, \n            cc: Optional[list[str]] = None, \n            bcc: Optional[list[str]] = None):\n\n        recipients, msg = self.compile_email(subject, to, html, data, cc, bcc)\n\n        with smtplib.SMTP(\"smtp.gmail.com\", 587) as smtp:\n            smtp.starttls() # Start TLS encryption\n            smtp.login(self.email_sender, self._email_password)\n            smtp.sendmail(self.email_sender, recipients, msg.as_string())\n\n    async def send_email_async(\n            self, \n            subject: str, \n            to: list[str], \n            html: str, \n            data: Optional[dict[str, Any]] = None, \n            cc: Optional[list[str]] = None, \n            bcc: Optional[list[str]] = None):\n\n        recipients, msg = self.compile_email(subject, to, html, data, cc, bcc)\n\n        async with aiosmtplib.SMTP(hostname='smtp.gmail.com', port=587, start_tls=True) as smtp:\n            await smtp.login(self.email_sender, self._email_password)\n            await smtp.sendmail(self.email_sender, recipients, msg.as_string())\n</code></pre>"},{"location":"root/utilities/email-service/#usage-example","title":"\ud83d\udcdd Usage Example","text":""},{"location":"root/utilities/email-service/#html-email-template","title":"HTML Email Template","text":"<p>template.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;body style=\"font-family: Arial, sans-serif;\"&gt;\n        &lt;p&gt;Hello {{name}},&lt;/p&gt;   &lt;!--(1)!--&gt; \n        &lt;p&gt;The issue you're experiencing is related to: &lt;b&gt;{{problem}}&lt;/b&gt;.&lt;/p&gt; &lt;!--(2)!--&gt; \n        &lt;p&gt;We are working on it and will get back to you shortly.&lt;/p&gt;\n        &lt;p&gt;Best regards,&lt;/p&gt;\n\n        &lt;!-- Simple Contact Signature --&gt;\n        &lt;p&gt;&lt;b&gt;Muhammad Umar Anzar&lt;/b&gt;&lt;br&gt;\n           AI/ML Engineer&lt;br&gt;\n           Hoopoes&lt;br&gt;\n        &lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <ol> <li>This placeholder will be replaced with the actual name during template rendering.</li> <li>This placeholder will be replaced with the actual name during template rendering.</li> </ol>"},{"location":"root/utilities/email-service/#sending-an-email","title":"Sending an Email","text":"main.py<pre><code>email_service = EmailService(\n    display_name=\"Umar\",\n    email_sender=\"your@email.com\",\n    email_password=\"your app password\",\n)\n</code></pre> SynchronousAsynchronous main.py<pre><code>email_service.send_email(\n    subject=\"Alert \ud83d\udea8\",\n    to=[\"john.doe@email.com\", \"doe.john@email.com\"],\n    cc=[\"john.doe@email.com\", \"doe.john@email.com\"],\n    bcc=[\"john.doe@email.com\", \"doe.john@email.com\"],\n    html=html_email,\n    data={\"name\": \"John Doe\", \"problem\": \"Internet Service\"},\n)\n</code></pre> main.py<pre><code>await email_service.send_email_async(\n    subject=\"Alert \ud83d\udea8\",\n    to=[\"john.doe@email.com\", \"doe.john@email.com\"],\n    cc=[\"john.doe@email.com\", \"doe.john@email.com\"],\n    bcc=[\"john.doe@email.com\", \"doe.john@email.com\"],\n    html=html_email,\n    data={\"name\": \"John Doe\", \"problem\": \"Internet Service\"},\n)\n</code></pre> <p>Tip</p> <ul> <li>Use environment variables to store sensitive credentials like your email and password.  </li> <li>Ensure \"Less secure app access\" is enabled in Gmail for SMTP to work.  </li> <li>Use app passwords instead of your regular password for better security.  </li> <li>Synchronous version may block the application during sending, whereas the asynchronous version provides non-blocking I/O.</li> </ul>"},{"location":"root/utilities/extract-json-from-text/","title":"Extract JSON Objects from Bulk Text","text":"<p>Parsing JSON objects from noisy or mixed-content text (e.g., LLM responses) is easy with this utility function.</p> <p>Dependencies</p> <pre><code>pip install jsonfinder\n</code></pre>"},{"location":"root/utilities/extract-json-from-text/#function-definition","title":"\u2699\ufe0f Function Definition","text":"utils.py<pre><code>import re\nimport jsonfinder\n\ndef extract_json_objects(text: str, sanitize_text: bool = False):\n    \"\"\"\n    Extracts valid JSON objects from a text string.\n\n    Args:\n        text (str): Input text that may contain embedded JSON objects.\n        sanitize_text (bool): If True, removes control characters often introduced by LLMs (e.g., Gemini).\n\n    Yields:\n        Any: Parsed JSON objects found in the text.\n\n    Examples:\n        &gt;&gt;&gt; list(extract_json_objects('Text: {\"a\": 1}'))\n        [{'a': 1}]\n    \"\"\"\n    if sanitize_text:\n        text = re.sub(r'[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F]+', '', text)\n\n    for i in jsonfinder.jsonfinder(text):\n        if i[2] is not None:\n            yield i[2]\n</code></pre>"},{"location":"root/utilities/extract-json-from-text/#when-to-use","title":"\u2705 When to Use","text":"<ul> <li>When parsing JSON embedded in LLM outputs.</li> <li>When processing logs, responses, or raw strings that contain but are not purely JSON</li> <li>When cleaning or extracting structured data from mixed-format text blobs</li> </ul>"},{"location":"root/utilities/extract-json-from-text/#usage-example","title":"\ud83d\udcdd Usage Example","text":""},{"location":"root/utilities/extract-json-from-text/#1-basic-json-object-extraction","title":"1. Basic JSON object extraction","text":"<pre><code>text = 'Text before {\"key\": \"value\"} text after'\nresult = next(extract_json_objects(text))\n\"\"\"\n{\"key\": \"value\"}\n\"\"\"\n</code></pre>"},{"location":"root/utilities/extract-json-from-text/#2-multiple-json-objects-in-one-string","title":"2. Multiple JSON objects in one string","text":"<pre><code>text = '{\"a\": 1} some text {\"b\": 2}'\nresult = list(extract_json_objects(text))\n\"\"\"\n[{\"a\": 1}, {\"b\": 2}]\n\"\"\"\n</code></pre>"},{"location":"root/utilities/extract-json-from-text/#3-malformed-json-should-not-be-returned","title":"3. Malformed JSON should not be returned","text":"<pre><code>text = 'Invalid: {key: 1}, valid: {\"c\": 3}, and valid: {\"q\": \"b\"}'\nfor json_obj in extract_json_objects(text):\n    print(json_obj)\n\"\"\"\n{\"c\": 3}\n{\"q\": \"b\"}\n\"\"\"\n</code></pre>"},{"location":"root/utilities/extract-json-from-text/#4-input-with-invalid-control-characters-no-cleaning","title":"4. Input with invalid control characters, no cleaning","text":"<pre><code>text = '{\"d\": 4\\x01}'\nresult = next(extract_json_objects(text), None)\n\"\"\"\nNone\n\"\"\"\n</code></pre>"},{"location":"root/utilities/extract-json-from-text/#5-input-with-control-characters-and-cleaning-enabled","title":"5. Input with control characters and cleaning enabled","text":"<pre><code>text = '{\"d\": 4\\x01}'\nresult = next(extract_json_objects(text, sanitize_text=True), None)\n\"\"\"\n{\"d\": 4}\n\"\"\"\n</code></pre>"},{"location":"root/utilities/extract-json-from-text/#6-no-json-present","title":"6. No JSON present","text":"<pre><code>text = 'Just some plain text.'\nresult = list(extract_json_objects(text))\n\"\"\"\n[]\n\"\"\"\n</code></pre>"},{"location":"root/utilities/extract-json-from-text/#7-nested-json-object","title":"7. Nested JSON object","text":"<pre><code>text = 'Here is a nested one: {\"outer\": {\"inner\": \"value\"}}'\nresult = next(extract_json_objects(text))\n\"\"\"\n{\"outer\": {\"inner\": \"value\"}}\n\"\"\"\n</code></pre>"},{"location":"root/utilities/extract-json-from-text/#8-json-array","title":"8. JSON array","text":"<pre><code>text = 'This is an array: [{\"x\": 1}, {\"y\": 2}]'\nresult = list(extract_json_objects(text))\n\"\"\"\n[\n    [{\"x\": 1}, {\"y\": 2}]\n]\n\"\"\"\n</code></pre>"}]}